#!/bin/bash

# GitAIOps Quick Start Integration Script
# For immediate testing with GitLab CE project

set -e

echo "üöÄ GitAIOps Quick Start Integration"
echo "=================================="
echo ""

# Check if GitAIOps is running
echo "üîç Checking GitAIOps platform..."
if curl -s http://localhost:8080/api/v1/health/ > /dev/null; then
    echo "‚úÖ GitAIOps platform is running"
else
    echo "‚ùå GitAIOps platform not found at localhost:8080"
    echo "Please start the platform first:"
    echo "  cd /path/to/gitaiops-platform && ./run.sh"
    exit 1
fi

echo ""
echo "üìã Quick Integration Options:"
echo ""
echo "1. üß™ Test with GitLab CE Demo Project (No token required)"
echo "2. üîó Integrate with your own GitLab project (Token required)"
echo "3. üìö View integration documentation"
echo ""

read -p "Choose option (1-3): " choice

case $choice in
    1)
        echo ""
        echo "üß™ Testing with GitLab CE Demo Project"
        echo "======================================"
        
        # Test demo endpoints
        echo "üîç Testing MR analysis..."
        if curl -s "http://localhost:8080/api/v1/ai/triage/demo" | jq '.demo' > /dev/null 2>&1; then
            echo "‚úÖ MR analysis working"
        else
            echo "‚ùå MR analysis not working"
        fi
        
        echo "üõ°Ô∏è Testing security scanner..."
        if curl -s "http://localhost:8080/api/v1/ai/scan/demo" | jq '.demo' > /dev/null 2>&1; then
            echo "‚úÖ Security scanner working"
        else
            echo "‚ùå Security scanner not working"
        fi
        
        echo "‚ö° Testing pipeline optimizer..."
        if curl -s "http://localhost:8080/api/v1/ai/optimize/demo" | jq '.demo' > /dev/null 2>&1; then
            echo "‚úÖ Pipeline optimizer working"
        else
            echo "‚ùå Pipeline optimizer not working"
        fi
        
        echo "üë• Testing expert finder..."
        if curl -s "http://localhost:8080/api/v1/codecompass/experts/demo" | jq '.demo' > /dev/null 2>&1; then
            echo "‚úÖ Expert finder working"
        else
            echo "‚ùå Expert finder not working"
        fi
        
        echo ""
        echo "üéØ Demo URLs:"
        echo "‚Ä¢ Dashboard: http://localhost:8080/dashboard/"
        echo "‚Ä¢ Live Demo: http://localhost:8080/dashboard/ ‚Üí Click 'Live Demo' tab"
        echo "‚Ä¢ Test Page: http://localhost:8080/test_live_demo.html"
        echo ""
        echo "üí° The Live Demo shows realistic analysis of actual GitLab projects!"
        ;;
        
    2)
        echo ""
        echo "üîó Setting up GitLab Integration"
        echo "==============================="
        
        # Check for GitLab token
        if [ -z "$GITLAB_TOKEN" ]; then
            echo "‚ùå GITLAB_TOKEN environment variable not set"
            echo ""
            echo "üìã Setup Instructions:"
            echo "1. Go to: https://gitlab.com/-/profile/personal_access_tokens"
            echo "2. Create token with scopes: api, read_user, read_repository, write_repository"
            echo "3. Export token: export GITLAB_TOKEN='glpat-your-token-here'"
            echo "4. Run this script again"
            echo ""
            exit 1
        fi
        
        echo "‚úÖ GitLab token found"
        echo ""
        
        # Get project ID
        read -p "Enter your GitLab project ID: " project_id
        
        if [ -z "$project_id" ]; then
            echo "‚ùå Project ID is required"
            exit 1
        fi
        
        echo ""
        echo "üöÄ Running integration setup..."
        
        # Run the comprehensive setup script
        if [ -f "./scripts/setup-gitlab-integration.sh" ]; then
            ./scripts/setup-gitlab-integration.sh --project-id "$project_id"
        else
            echo "‚ùå Integration script not found"
            echo "Please run from the GitAIOps platform root directory"
            exit 1
        fi
        ;;
        
    3)
        echo ""
        echo "üìö Integration Documentation"
        echo "==========================="
        
        echo "üìÑ Available Documentation:"
        echo ""
        
        if [ -f "./docs/GITLAB_INTEGRATION_GUIDE.md" ]; then
            echo "‚úÖ Complete Integration Guide: docs/GITLAB_INTEGRATION_GUIDE.md"
        else
            echo "‚ùå Integration guide not found"
        fi
        
        if [ -f "./GITLAB_CHALLENGE.md" ]; then
            echo "‚úÖ GitLab Challenge Details: GITLAB_CHALLENGE.md"
        else
            echo "‚ùå Challenge documentation not found"
        fi
        
        if [ -f "./README.md" ]; then
            echo "‚úÖ Project README: README.md"
        else
            echo "‚ùå README not found"
        fi
        
        echo ""
        echo "üåê Online Documentation:"
        echo "‚Ä¢ Full Documentation: https://docs.gitaiops.dev"
        echo "‚Ä¢ GitLab Integration: https://docs.gitaiops.dev/gitlab"
        echo "‚Ä¢ API Reference: https://docs.gitaiops.dev/api"
        echo ""
        
        echo "üìñ Quick Links:"
        echo "‚Ä¢ GitLab Challenge: https://about.gitlab.com/blog/2024/12/11/gitlab-ai-challenge/"
        echo "‚Ä¢ GitLab CI/CD Catalog: https://docs.gitlab.com/ee/ci/components/"
        echo "‚Ä¢ GitLab Webhooks: https://docs.gitlab.com/ee/user/project/integrations/webhooks.html"
        ;;
        
    *)
        echo "‚ùå Invalid option. Please choose 1, 2, or 3."
        exit 1
        ;;
esac

echo ""
echo "üéâ Thank you for using GitAIOps!"
echo ""
echo "Need help? Contact us:"
echo "‚Ä¢ Discord: https://discord.gg/gitaiops"
echo "‚Ä¢ Email: support@gitaiops.dev"
echo "‚Ä¢ Issues: https://github.com/gitaiops/platform/issues"