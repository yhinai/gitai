# GitLab CI/CD Catalog Component: AI-Powered MR Triage
# Accelerates merge request reviews by 60% through intelligent analysis

spec:
  inputs:
    mr_iid:
      description: "Merge Request IID to analyze (auto-detected if not provided)"
      type: string
      default: "$CI_MERGE_REQUEST_IID"
    
    risk_threshold:
      description: "Risk threshold for automated actions"
      type: string
      default: "medium"
      options: ["low", "medium", "high"]
    
    auto_assign_reviewers:
      description: "Automatically assign AI-suggested reviewers"
      type: boolean
      default: true
    
    post_analysis_comment:
      description: "Post AI analysis as MR comment"
      type: boolean  
      default: true
    
    gitlab_token:
      description: "GitLab API token for posting comments (use CI/CD variable)"
      type: string
      default: "$GITLAB_TOKEN"

---

# 🤖 AI MR Triage Analysis
ai-mr-triage:
  image: registry.gitlab.com/gitaiops/mr-triage:v1.2.0
  variables:
    GITLAB_PROJECT_ID: "$CI_PROJECT_ID"
    GITLAB_MR_IID: "$[[ inputs.mr_iid ]]"
    GITLAB_TOKEN: "$[[ inputs.gitlab_token ]]"
    RISK_THRESHOLD: "$[[ inputs.risk_threshold ]]"
    AUTO_ASSIGN: "$[[ inputs.auto_assign_reviewers ]]"
    POST_COMMENT: "$[[ inputs.post_analysis_comment ]]"
  
  script:
    - echo "🤖 Starting AI-powered MR analysis..."
    - echo "📋 Analyzing MR #${GITLAB_MR_IID} in project ${GITLAB_PROJECT_ID}"
    
    # Run AI analysis
    - |
      if [ -n "$GITLAB_MR_IID" ]; then
        gitaiops analyze-mr \
          --project-id "$GITLAB_PROJECT_ID" \
          --mr-iid "$GITLAB_MR_IID" \
          --risk-threshold "$RISK_THRESHOLD" \
          --format json \
          > mr-analysis-results.json
        
        # Display analysis summary
        echo "📊 Analysis Results:"
        cat mr-analysis-results.json | jq -r '
          "🎯 Risk Level: " + .risk_level + " (" + (.risk_score * 100 | round | tostring) + "%)",
          "⏱️ Est. Review Time: " + (.estimated_review_hours | tostring) + " hours",
          "👥 Suggested Reviewers: " + (.suggested_reviewers | length | tostring),
          "🔍 Security Review: " + (if .requires_security_review then "Required" else "Not Required" end),
          "📈 Complexity: " + .complexity,
          "🏷️ Suggested Labels: " + (.labels | join(", "))
        '
        
        # Auto-assign reviewers if enabled
        if [ "$AUTO_ASSIGN" = "true" ]; then
          echo "👥 Auto-assigning suggested reviewers..."
          cat mr-analysis-results.json | jq -r '.suggested_reviewers[].username' | while read reviewer; do
            gitaiops assign-reviewer --project-id "$GITLAB_PROJECT_ID" --mr-iid "$GITLAB_MR_IID" --username "$reviewer"
          done
        fi
        
        # Post analysis comment if enabled
        if [ "$POST_COMMENT" = "true" ]; then
          echo "💬 Posting AI analysis comment..."
          gitaiops post-analysis-comment \
            --project-id "$GITLAB_PROJECT_ID" \
            --mr-iid "$GITLAB_MR_IID" \
            --analysis-file mr-analysis-results.json
        fi
        
        echo "✅ MR analysis completed successfully"
      else
        echo "ℹ️ No merge request to analyze (not in MR context)"
        echo '{"status": "skipped", "reason": "no_mr_context"}' > mr-analysis-results.json
      fi
  
  artifacts:
    reports:
      junit: mr-analysis-junit.xml
    paths:
      - mr-analysis-results.json
      - mr-triage-metrics.json
    expire_in: 1 week
  
  # Performance optimizations
  cache:
    key: "mr-triage-${CI_PROJECT_ID}"
    paths:
      - .triage-cache/
  
  # Only run on merge requests
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
  
  timeout: 3 minutes
  
  # Resource limits for efficient execution
  resource_group: mr-analysis