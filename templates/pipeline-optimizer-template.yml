# GitLab CI/CD Catalog Component: AI-Powered Pipeline Optimizer
# Reduces CI/CD time by 40% through intelligent optimization analysis

spec:
  inputs:
    optimization_level:
      description: "Level of optimization analysis to perform"
      type: string
      default: "balanced"
      options: ["conservative", "balanced", "aggressive"]
    
    analyze_historical_data:
      description: "Analyze historical pipeline data for trends"
      type: boolean
      default: true
    
    suggest_parallelization:
      description: "Suggest job parallelization opportunities"
      type: boolean
      default: true
    
    suggest_caching:
      description: "Suggest caching optimizations"
      type: boolean
      default: true
    
    suggest_resource_tuning:
      description: "Suggest resource allocation improvements"
      type: boolean
      default: true
    
    auto_apply_optimizations:
      description: "Automatically apply safe optimizations"
      type: boolean
      default: false
    
    cost_analysis:
      description: "Include cost analysis in optimization recommendations"
      type: boolean
      default: true

---

# ⚡ AI-Powered Pipeline Optimization
ai-pipeline-optimizer:
  image: registry.gitlab.com/gitaiops/pipeline-optimizer:v1.1.0
  variables:
    OPTIMIZATION_LEVEL: "$[[ inputs.optimization_level ]]"
    ANALYZE_HISTORICAL: "$[[ inputs.analyze_historical_data ]]"
    SUGGEST_PARALLEL: "$[[ inputs.suggest_parallelization ]]"
    SUGGEST_CACHING: "$[[ inputs.suggest_caching ]]"
    SUGGEST_RESOURCES: "$[[ inputs.suggest_resource_tuning ]]"
    AUTO_APPLY: "$[[ inputs.auto_apply_optimizations ]]"
    COST_ANALYSIS: "$[[ inputs.cost_analysis ]]"
    GITLAB_PROJECT_ID: "$CI_PROJECT_ID"
    GITLAB_PIPELINE_ID: "$CI_PIPELINE_ID"
    GITLAB_TOKEN: "$GITLAB_TOKEN"
  
  before_script:
    - echo "⚡ Initializing AI-powered pipeline optimizer..."
    - echo "🔍 Optimization level: $OPTIMIZATION_LEVEL"
    - echo "📊 Analyzing pipeline: $CI_PIPELINE_ID"
    - echo "📈 Project: $CI_PROJECT_NAME ($CI_PROJECT_ID)"
    
    # Create analysis directories
    - mkdir -p optimization-reports
    - mkdir -p optimization-configs
    - mkdir -p performance-data
  
  script:
    # Fetch current pipeline configuration
    - |
      echo "📋 Fetching current pipeline configuration..."
      gitaiops fetch-pipeline-config \
        --project-id "$GITLAB_PROJECT_ID" \
        --pipeline-id "$GITLAB_PIPELINE_ID" \
        --output optimization-configs/current-config.yml
    
    # Analyze historical pipeline data if enabled
    - |
      if [ "$ANALYZE_HISTORICAL" = "true" ]; then
        echo "📈 Analyzing historical pipeline performance..."
        gitaiops analyze-pipeline-history \
          --project-id "$GITLAB_PROJECT_ID" \
          --days-back 30 \
          --output performance-data/historical-analysis.json \
          --include-trends true \
          --include-bottlenecks true
        
        echo "📊 Historical analysis summary:"
        cat performance-data/historical-analysis.json | jq -r '
          "📅 Analysis Period: " + .analysis_period,
          "🔄 Total Pipelines: " + (.total_pipelines | tostring),
          "⏱️ Avg Duration: " + (.average_duration_minutes | tostring) + " minutes",
          "✅ Success Rate: " + (.success_rate * 100 | round | tostring) + "%",
          "💰 Total Cost: $" + (.total_cost | tostring),
          "🎯 Most Common Bottleneck: " + .top_bottleneck
        '
      fi
    
    # Run main optimization analysis
    - |
      echo "🤖 Running AI-powered optimization analysis..."
      gitaiops optimize-pipeline \
        --project-id "$GITLAB_PROJECT_ID" \
        --pipeline-id "$GITLAB_PIPELINE_ID" \
        --optimization-level "$OPTIMIZATION_LEVEL" \
        --config-file optimization-configs/current-config.yml \
        --output optimization-reports/optimization-analysis.json \
        --format detailed \
        --ai-enhanced true
    
    # Generate specific optimization recommendations
    - |
      echo "💡 Generating optimization recommendations..."
      
      if [ "$SUGGEST_PARALLEL" = "true" ]; then
        echo "🔄 Analyzing parallelization opportunities..."
        gitaiops suggest-parallelization \
          --config-file optimization-configs/current-config.yml \
          --output optimization-reports/parallelization-suggestions.json
      fi
      
      if [ "$SUGGEST_CACHING" = "true" ]; then
        echo "💾 Analyzing caching opportunities..."
        gitaiops suggest-caching \
          --project-path "$CI_PROJECT_DIR" \
          --pipeline-config optimization-configs/current-config.yml \
          --output optimization-reports/caching-suggestions.json
      fi
      
      if [ "$SUGGEST_RESOURCES" = "true" ]; then
        echo "🎛️ Analyzing resource allocation..."
        gitaiops suggest-resources \
          --pipeline-id "$GITLAB_PIPELINE_ID" \
          --historical-data performance-data/historical-analysis.json \
          --output optimization-reports/resource-suggestions.json
      fi
    
    # Cost analysis if enabled
    - |
      if [ "$COST_ANALYSIS" = "true" ]; then
        echo "💰 Performing cost analysis..."
        gitaiops analyze-costs \
          --project-id "$GITLAB_PROJECT_ID" \
          --optimization-analysis optimization-reports/optimization-analysis.json \
          --output optimization-reports/cost-analysis.json \
          --include-savings-projection true
        
        echo "💰 Cost analysis summary:"
        cat optimization-reports/cost-analysis.json | jq -r '
          "💰 Current Monthly Cost: $" + (.current_monthly_cost | tostring),
          "📉 Potential Savings: $" + (.potential_monthly_savings | tostring),
          "📊 Savings Percentage: " + (.savings_percentage | tostring) + "%",
          "⏱️ ROI Timeline: " + .roi_timeline
        '
      fi
    
    # Generate comprehensive optimization report
    - |
      echo "📄 Generating comprehensive optimization report..."
      gitaiops generate-optimization-report \
        --analysis-file optimization-reports/optimization-analysis.json \
        --parallelization-file optimization-reports/parallelization-suggestions.json \
        --caching-file optimization-reports/caching-suggestions.json \
        --resource-file optimization-reports/resource-suggestions.json \
        --cost-file optimization-reports/cost-analysis.json \
        --output optimization-reports/comprehensive-report.md \
        --format markdown \
        --include-implementation-guide true
    
    # Display optimization summary
    - |
      echo "📊 Optimization Analysis Summary:"
      cat optimization-reports/optimization-analysis.json | jq -r '
        "⚡ Current Pipeline Duration: " + (.current_metrics.avg_duration | tostring) + " minutes",
        "🎯 Optimized Duration: " + (.predicted_metrics.avg_duration | tostring) + " minutes",
        "📈 Time Savings: " + ((.current_metrics.avg_duration - .predicted_metrics.avg_duration) | tostring) + " minutes",
        "💰 Cost Savings: $" + ((.current_metrics.cost_per_run - .predicted_metrics.cost_per_run) | tostring),
        "🎭 Optimization Score: " + (.overall_score | tostring) + "/10",
        "🔧 Recommendations: " + (.recommendations | length | tostring)
      '
    
    # Auto-apply safe optimizations if enabled
    - |
      if [ "$AUTO_APPLY" = "true" ]; then
        echo "🤖 Auto-applying safe optimizations..."
        gitaiops apply-optimizations \
          --project-id "$GITLAB_PROJECT_ID" \
          --analysis-file optimization-reports/optimization-analysis.json \
          --safety-level conservative \
          --dry-run false \
          --backup-config true
        
        echo "✅ Safe optimizations applied successfully"
        echo "📋 Backup of original configuration saved"
      else
        echo "ℹ️ Auto-apply disabled - review recommendations manually"
      fi
    
    # Generate GitLab-compatible performance report
    - |
      echo "📈 Generating GitLab performance report..."
      cat > optimization-reports/gitlab-performance-report.json << EOF
      {
        "version": "1.0.0",
        "metrics": [
          {
            "name": "pipeline_duration",
            "value": $(cat optimization-reports/optimization-analysis.json | jq '.current_metrics.avg_duration'),
            "unit": "minutes",
            "desiredSize": "smaller"
          },
          {
            "name": "optimization_score", 
            "value": $(cat optimization-reports/optimization-analysis.json | jq '.overall_score'),
            "unit": "score",
            "desiredSize": "larger"
          },
          {
            "name": "potential_time_savings",
            "value": $(cat optimization-reports/optimization-analysis.json | jq '(.current_metrics.avg_duration - .predicted_metrics.avg_duration)'),
            "unit": "minutes",
            "desiredSize": "larger"
          }
        ]
      }
      EOF
  
  after_script:
    # Generate final optimization metrics
    - |
      echo "📊 Generating optimization metrics..."
      CURRENT_DURATION=$(cat optimization-reports/optimization-analysis.json | jq '.current_metrics.avg_duration // 0')
      OPTIMIZED_DURATION=$(cat optimization-reports/optimization-analysis.json | jq '.predicted_metrics.avg_duration // 0')
      RECOMMENDATIONS_COUNT=$(cat optimization-reports/optimization-analysis.json | jq '.recommendations | length // 0')
      
      cat > optimization-metrics.json << EOF
      {
        "analysis_timestamp": "$(date -Iseconds)",
        "project_id": "$CI_PROJECT_ID",
        "pipeline_id": "$CI_PIPELINE_ID",
        "optimization_level": "$OPTIMIZATION_LEVEL",
        "current_duration_minutes": $CURRENT_DURATION,
        "optimized_duration_minutes": $OPTIMIZED_DURATION,
        "time_savings_minutes": $(echo "$CURRENT_DURATION - $OPTIMIZED_DURATION" | bc -l || echo "0"),
        "recommendations_count": $RECOMMENDATIONS_COUNT,
        "auto_applied": $AUTO_APPLY
      }
      EOF
      
      echo "✅ Optimization analysis completed"
  
  artifacts:
    reports:
      performance: optimization-reports/gitlab-performance-report.json
    
    paths:
      - optimization-reports/
      - optimization-configs/
      - performance-data/
      - optimization-metrics.json
    
    expire_in: 30 days
    when: always
  
  # Performance optimizations
  cache:
    key: "pipeline-optimizer-${CI_PROJECT_ID}"
    paths:
      - .optimizer-cache/
      - .performance-cache/
  
  # Resource management
  timeout: 8 minutes
  interruptible: true
  
  # Run optimization analysis on all pipelines
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      variables:
        OPTIMIZATION_LEVEL: "comprehensive"
        ANALYZE_HISTORICAL: "true"
    
  # Allow manual execution with custom parameters
  when: always
  
  # Run in parallel with other jobs
  needs: []