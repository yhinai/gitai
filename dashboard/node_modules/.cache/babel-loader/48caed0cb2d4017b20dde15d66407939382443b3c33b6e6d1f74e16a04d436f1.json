{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';const API_BASE='http://localhost:8000';export const useRealTimeData=()=>{const[health,setHealth]=useState(null);const[events,setEvents]=useState(null);const[project,setProject]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchData=useCallback(async()=>{try{const[healthRes,eventsRes,projectRes]=await Promise.all([fetch(\"\".concat(API_BASE,\"/health/\")),fetch(\"\".concat(API_BASE,\"/api/v1/metrics/events\")),fetch(\"\".concat(API_BASE,\"/api/v1/gitlab/projects/278964\"))]);if(healthRes.ok){const healthData=await healthRes.json();setHealth(healthData);}if(eventsRes.ok){const eventsData=await eventsRes.json();setEvents(eventsData);}if(projectRes.ok){const projectData=await projectRes.json();setProject(projectData);}setError(null);}catch(err){setError(err instanceof Error?err.message:'Failed to fetch data');}finally{setLoading(false);}},[]);useEffect(()=>{fetchData();const interval=setInterval(fetchData,2000);// Update every 2 seconds\nreturn()=>clearInterval(interval);},[fetchData]);return{health,events,project,loading,error,refetch:fetchData};};","map":{"version":3,"names":["useState","useEffect","useCallback","API_BASE","useRealTimeData","health","setHealth","events","setEvents","project","setProject","loading","setLoading","error","setError","fetchData","healthRes","eventsRes","projectRes","Promise","all","fetch","concat","ok","healthData","json","eventsData","projectData","err","Error","message","interval","setInterval","clearInterval","refetch"],"sources":["/Users/alhinai/Desktop/MCP/gitaiops-platform/dashboard/src/hooks/useRealTimeData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport interface SystemHealth {\n  status: string;\n  timestamp: string;\n  service: string;\n  services: Record<string, {\n    status: string;\n    last_check: string;\n    error_count: number;\n    dependencies: string[];\n  }>;\n  healthy_services: number;\n  total_services: number;\n}\n\nexport interface EventStats {\n  running: boolean;\n  worker_count: number;\n  total_queue_size: number;\n  queue_sizes: Record<string, number>;\n  total_processed: number;\n  total_failed: number;\n  events_by_type: Record<string, number>;\n  avg_processing_time: number;\n  processor_stats: Record<string, Record<string, number>>;\n  recent_events: any[];\n}\n\nexport interface GitLabProject {\n  id: number;\n  name: string;\n  path: string;\n  description: string;\n  web_url: string;\n  last_activity_at: string;\n}\n\nconst API_BASE = 'http://localhost:8000';\n\nexport const useRealTimeData = () => {\n  const [health, setHealth] = useState<SystemHealth | null>(null);\n  const [events, setEvents] = useState<EventStats | null>(null);\n  const [project, setProject] = useState<GitLabProject | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = useCallback(async () => {\n    try {\n      const [healthRes, eventsRes, projectRes] = await Promise.all([\n        fetch(`${API_BASE}/health/`),\n        fetch(`${API_BASE}/api/v1/metrics/events`),\n        fetch(`${API_BASE}/api/v1/gitlab/projects/278964`)\n      ]);\n\n      if (healthRes.ok) {\n        const healthData = await healthRes.json();\n        setHealth(healthData);\n      }\n\n      if (eventsRes.ok) {\n        const eventsData = await eventsRes.json();\n        setEvents(eventsData);\n      }\n\n      if (projectRes.ok) {\n        const projectData = await projectRes.json();\n        setProject(projectData);\n      }\n\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch data');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // Update every 2 seconds\n    return () => clearInterval(interval);\n  }, [fetchData]);\n\n  return {\n    health,\n    events,\n    project,\n    loading,\n    error,\n    refetch: fetchData\n  };\n}; "],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAsCxD,KAAM,CAAAC,QAAQ,CAAG,uBAAuB,CAExC,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CACnC,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGN,QAAQ,CAAsB,IAAI,CAAC,CAC/D,KAAM,CAACO,MAAM,CAAEC,SAAS,CAAC,CAAGR,QAAQ,CAAoB,IAAI,CAAC,CAC7D,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAuB,IAAI,CAAC,CAClE,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACa,KAAK,CAAEC,QAAQ,CAAC,CAAGd,QAAQ,CAAgB,IAAI,CAAC,CAEvD,KAAM,CAAAe,SAAS,CAAGb,WAAW,CAAC,SAAY,CACxC,GAAI,CACF,KAAM,CAACc,SAAS,CAAEC,SAAS,CAAEC,UAAU,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CAC3DC,KAAK,IAAAC,MAAA,CAAInB,QAAQ,YAAU,CAAC,CAC5BkB,KAAK,IAAAC,MAAA,CAAInB,QAAQ,0BAAwB,CAAC,CAC1CkB,KAAK,IAAAC,MAAA,CAAInB,QAAQ,kCAAgC,CAAC,CACnD,CAAC,CAEF,GAAIa,SAAS,CAACO,EAAE,CAAE,CAChB,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAR,SAAS,CAACS,IAAI,CAAC,CAAC,CACzCnB,SAAS,CAACkB,UAAU,CAAC,CACvB,CAEA,GAAIP,SAAS,CAACM,EAAE,CAAE,CAChB,KAAM,CAAAG,UAAU,CAAG,KAAM,CAAAT,SAAS,CAACQ,IAAI,CAAC,CAAC,CACzCjB,SAAS,CAACkB,UAAU,CAAC,CACvB,CAEA,GAAIR,UAAU,CAACK,EAAE,CAAE,CACjB,KAAM,CAAAI,WAAW,CAAG,KAAM,CAAAT,UAAU,CAACO,IAAI,CAAC,CAAC,CAC3Cf,UAAU,CAACiB,WAAW,CAAC,CACzB,CAEAb,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAE,MAAOc,GAAG,CAAE,CACZd,QAAQ,CAACc,GAAG,WAAY,CAAAC,KAAK,CAAGD,GAAG,CAACE,OAAO,CAAG,sBAAsB,CAAC,CACvE,CAAC,OAAS,CACRlB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,EAAE,CAAC,CAENX,SAAS,CAAC,IAAM,CACdc,SAAS,CAAC,CAAC,CACX,KAAM,CAAAgB,QAAQ,CAAGC,WAAW,CAACjB,SAAS,CAAE,IAAI,CAAC,CAAE;AAC/C,MAAO,IAAMkB,aAAa,CAACF,QAAQ,CAAC,CACtC,CAAC,CAAE,CAAChB,SAAS,CAAC,CAAC,CAEf,MAAO,CACLV,MAAM,CACNE,MAAM,CACNE,OAAO,CACPE,OAAO,CACPE,KAAK,CACLqB,OAAO,CAAEnB,SACX,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}