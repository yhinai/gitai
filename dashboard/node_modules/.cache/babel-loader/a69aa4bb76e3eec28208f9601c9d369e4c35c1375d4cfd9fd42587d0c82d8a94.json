{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nconst API_BASE = 'http://localhost:8000';\nexport const useRealTimeData = (projectId = 70835889) => {\n  _s();\n  const [health, setHealth] = useState(null);\n  const [events, setEvents] = useState(null);\n  const [project, setProject] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchData = useCallback(async () => {\n    try {\n      const [healthRes, eventsRes, projectRes] = await Promise.all([fetch(`${API_BASE}/health/`), fetch(`${API_BASE}/api/v1/metrics/events`), fetch(`${API_BASE}/api/v1/gitlab/projects/${projectId}`)]);\n      if (healthRes.ok) {\n        const healthData = await healthRes.json();\n        setHealth(healthData);\n      }\n      if (eventsRes.ok) {\n        const eventsData = await eventsRes.json();\n        setEvents(eventsData);\n      }\n      if (projectRes.ok) {\n        const projectData = await projectRes.json();\n        setProject(projectData);\n      } else {\n        // If project fetch fails, set error but don't break other data\n        console.warn(`Failed to fetch project ${projectId}:`, projectRes.status);\n        setProject(null);\n      }\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch data');\n    } finally {\n      setLoading(false);\n    }\n  }, [projectId]);\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // Update every 2 seconds\n    return () => clearInterval(interval);\n  }, [fetchData]);\n  return {\n    health,\n    events,\n    project,\n    loading,\n    error,\n    refetch: fetchData\n  };\n};\n_s(useRealTimeData, \"Emg48RkjM9KLrNX2dyDaORcyYf4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","API_BASE","useRealTimeData","projectId","_s","health","setHealth","events","setEvents","project","setProject","loading","setLoading","error","setError","fetchData","healthRes","eventsRes","projectRes","Promise","all","fetch","ok","healthData","json","eventsData","projectData","console","warn","status","err","Error","message","interval","setInterval","clearInterval","refetch"],"sources":["/Users/alhinai/Desktop/MCP/gitaiops-platform/dashboard/src/hooks/useRealTimeData.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nexport interface SystemHealth {\n  status: string;\n  timestamp: string;\n  service: string;\n  services: Record<string, {\n    status: string;\n    last_check: string;\n    error_count: number;\n    dependencies: string[];\n  }>;\n  healthy_services: number;\n  total_services: number;\n}\n\nexport interface EventStats {\n  running: boolean;\n  worker_count: number;\n  total_queue_size: number;\n  queue_sizes: Record<string, number>;\n  total_processed: number;\n  total_failed: number;\n  events_by_type: Record<string, number>;\n  avg_processing_time: number;\n  processor_stats: Record<string, Record<string, number>>;\n  recent_events: any[];\n}\n\nexport interface GitLabProject {\n  id: number;\n  name: string;\n  path: string;\n  description: string;\n  web_url: string;\n  last_activity_at: string;\n}\n\nconst API_BASE = 'http://localhost:8000';\n\nexport const useRealTimeData = (projectId: number = 70835889) => {\n  const [health, setHealth] = useState<SystemHealth | null>(null);\n  const [events, setEvents] = useState<EventStats | null>(null);\n  const [project, setProject] = useState<GitLabProject | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchData = useCallback(async () => {\n    try {\n      const [healthRes, eventsRes, projectRes] = await Promise.all([\n        fetch(`${API_BASE}/health/`),\n        fetch(`${API_BASE}/api/v1/metrics/events`),\n        fetch(`${API_BASE}/api/v1/gitlab/projects/${projectId}`)\n      ]);\n\n      if (healthRes.ok) {\n        const healthData = await healthRes.json();\n        setHealth(healthData);\n      }\n\n      if (eventsRes.ok) {\n        const eventsData = await eventsRes.json();\n        setEvents(eventsData);\n      }\n\n      if (projectRes.ok) {\n        const projectData = await projectRes.json();\n        setProject(projectData);\n      } else {\n        // If project fetch fails, set error but don't break other data\n        console.warn(`Failed to fetch project ${projectId}:`, projectRes.status);\n        setProject(null);\n      }\n\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch data');\n    } finally {\n      setLoading(false);\n    }\n  }, [projectId]);\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 2000); // Update every 2 seconds\n    return () => clearInterval(interval);\n  }, [fetchData]);\n\n  return {\n    health,\n    events,\n    project,\n    loading,\n    error,\n    refetch: fetchData\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAsCxD,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,OAAO,MAAMC,eAAe,GAAGA,CAACC,SAAiB,GAAG,QAAQ,KAAK;EAAAC,EAAA;EAC/D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAsB,IAAI,CAAC;EAC/D,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAoB,IAAI,CAAC;EAC7D,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAuB,IAAI,CAAC;EAClE,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAMiB,SAAS,GAAGf,WAAW,CAAC,YAAY;IACxC,IAAI;MACF,MAAM,CAACgB,SAAS,EAAEC,SAAS,EAAEC,UAAU,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC3DC,KAAK,CAAC,GAAGpB,QAAQ,UAAU,CAAC,EAC5BoB,KAAK,CAAC,GAAGpB,QAAQ,wBAAwB,CAAC,EAC1CoB,KAAK,CAAC,GAAGpB,QAAQ,2BAA2BE,SAAS,EAAE,CAAC,CACzD,CAAC;MAEF,IAAIa,SAAS,CAACM,EAAE,EAAE;QAChB,MAAMC,UAAU,GAAG,MAAMP,SAAS,CAACQ,IAAI,CAAC,CAAC;QACzClB,SAAS,CAACiB,UAAU,CAAC;MACvB;MAEA,IAAIN,SAAS,CAACK,EAAE,EAAE;QAChB,MAAMG,UAAU,GAAG,MAAMR,SAAS,CAACO,IAAI,CAAC,CAAC;QACzChB,SAAS,CAACiB,UAAU,CAAC;MACvB;MAEA,IAAIP,UAAU,CAACI,EAAE,EAAE;QACjB,MAAMI,WAAW,GAAG,MAAMR,UAAU,CAACM,IAAI,CAAC,CAAC;QAC3Cd,UAAU,CAACgB,WAAW,CAAC;MACzB,CAAC,MAAM;QACL;QACAC,OAAO,CAACC,IAAI,CAAC,2BAA2BzB,SAAS,GAAG,EAAEe,UAAU,CAACW,MAAM,CAAC;QACxEnB,UAAU,CAAC,IAAI,CAAC;MAClB;MAEAI,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOgB,GAAG,EAAE;MACZhB,QAAQ,CAACgB,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,sBAAsB,CAAC;IACvE,CAAC,SAAS;MACRpB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACT,SAAS,CAAC,CAAC;EAEfJ,SAAS,CAAC,MAAM;IACdgB,SAAS,CAAC,CAAC;IACX,MAAMkB,QAAQ,GAAGC,WAAW,CAACnB,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/C,OAAO,MAAMoB,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAAClB,SAAS,CAAC,CAAC;EAEf,OAAO;IACLV,MAAM;IACNE,MAAM;IACNE,OAAO;IACPE,OAAO;IACPE,KAAK;IACLuB,OAAO,EAAErB;EACX,CAAC;AACH,CAAC;AAACX,EAAA,CAxDWF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}